=============
Calendar View
=============

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()

Monthly Calendar
================

The calendar view provides some helper functionality:

>>> from zeit.calendar.browser.calendar_view import Calendar
>>> import zeit.calendar.event
>>> events = [zeit.calendar.event.Event()]
>>> class CalendarMock(object):
...
...     def getEvents(self, date):
...         if date.day == 12:
...             return events
...         return None
...
...     def haveEvents(self, date):
...         if date.day == 12:
...             return True
...         return False
...

Request a calendar for 6/2006:

>>> import zope.publisher.browser
>>> request = zope.publisher.browser.TestRequest(
...     form={'year': 2001, 'month': 6})
>>> calendar = Calendar(CalendarMock(), request)

According to the request we expect the calendar for 6/2001 back:

>>> calendar.selected_year
2001
>>> calendar.selected_month
6
>>> from pprint import pprint
>>> pprint(calendar.selected_month_calendar)
[[None,
  None,
  None,
  None,
  {'date_str': '2001-06-01',
   'day': 1,
   'events': None,
   'have_events': False,
   'is_today': False},
  {'date_str': '2001-06-02',
   'day': 2,
   'events': None,
   'have_events': False,
   'is_today': False},
   ...
  {'date_str': '2001-06-10',
   'day': 10,
   'events': None,
   'have_events': False,
   'is_today': False}],
 [{'date_str': '2001-06-11',
   'day': 11,
   'events': None,
   'have_events': False,
   'is_today': False},
  {'date_str': '2001-06-12',
   'day': 12,
   'events': [{'css': 'event misc',
               'id': 'event...', 
               'obj': <zeit.calendar.event.Event object at 0x...>,
               'priority': ''}],
   'have_events': True,
   'is_today': False},
   ...
  {'date_str': '2001-06-28',
   'day': 28,
   'events': None,
   'have_events': False,
   'is_today': False},
  {'date_str': '2001-06-29',
   'day': 29,
   'events': None,
   'have_events': False,
   'is_today': False},
  {'date_str': '2001-06-30',
   'day': 30,
   'events': None,
   'have_events': False,
   'is_today': False},
  None]]

   
We can ask for the next/previous month/year. The values are relative to the
date given in the request:

>>> calendar.forward
datetime.date(2001, 7, 1)

>>> calendar.backward
datetime.date(2001, 5, 1)

>>> calendar.fastforward
datetime.date(2002, 6, 1)

>>> calendar.fastbackward
datetime.date(2000, 6, 1)



Weekly Calendar
===============

The weekly calendar is not really weekly but shows yesterday and the next
seven days:

>>> from zeit.calendar.browser.calendar_view import Week
>>> request = zope.publisher.browser.TestRequest(
...     form={'year': 2001, 'month': 6, 'day': 13},
...     HTTP_ACCEPT_LANGUAGE='en')
>>> week = Week(CalendarMock(), request)
>>> week
<zeit.calendar.browser.calendar_view.Week object at 0x...>

We can get the day names. 2001-06-13 was a Wednesday. So our list starts with
Tuesday and ranges till the *next* Tuesday:

>>> week.day_names
[u'Tue, 12. Jun', u'Wed, 13. Jun', u'Thu, 14. Jun', u'Fri, 15. Jun', u'Sat, 16. Jun', u'Sun, 17. Jun', u'Mon, 18. Jun', u'Tue, 19. Jun']

Get the events:

>>> pprint(week.selected_week_calendar)
[{'date_str': '2001-06-12',
  'day': 12,
  'events': [{'css': 'event misc',
               'id': 'event...', 
              'obj': <zeit.calendar.event.Event object at 0x...>,
              'priority': ''}],
  'have_events': True,
  'is_today': False},
 {'date_str': '2001-06-13',
  'day': 13,
  'events': None,
  'have_events': False,
  'is_today': False},
  ...
 {'date_str': '2001-06-19',
  'day': 19,
  'events': None,
  'have_events': False,
  'is_today': False}]


Sorting of events
=================

Events in the calendar are sorted:

1. Unfinished events are before completed events. 
2. Higher priority events are above lower priority events.

Add a few events:

>>> events[:] = []
>>> for priority in (None, 0, 1, -1):
...     for completed in (True, False):
...         e = zeit.calendar.event.Event()
...         e.priority = priority
...         e.completed = completed
...         e.title = u'P=%s C=%s' % (priority, completed)
...         events.append(e)


Get the dict for the day and print out the titles:

>>> import datetime
>>> for d in week._get_day_dict(datetime.date(2008, 4, 12))['events']:
...     print d['obj'].title
P=1 C=False
P=0 C=False
P=-1 C=False
P=None C=False
P=1 C=True
P=0 C=True
P=-1 C=True
P=None C=True
